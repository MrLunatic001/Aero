# Save by adrie on 2024_11_04-22.43.26; build 2024 2023_09_21-13.55.25 RELr426 190762
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(0.0, 40.0))
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 40.0), point2=(
    200.0, 40.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(200.0, 40.0), 
    point2=(260.0, 40.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[2], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(0.0, 40.0))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(0.0, -40.0))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(0.0, -40.0))
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 40.0), point2=(
    0.0, -40.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, -40.0), point2=
    (200.0, -40.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(200.0, -40.0), 
    point2=(260.0, -40.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[5], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(200.0, -40.0), 
    point2=(200.0, 40.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    260.0, 0.0), point1=(260.0, -40.0))
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].ArcByCenterEnds(center=(260.0, 
    0.0), direction=COUNTERCLOCKWISE, point1=(260.0, -40.0), point2=(260.0, 
    40.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-1'].BaseShellExtrude(depth=2000.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
del mdb.models['Model-1'].parts['Part-1']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 40.0), point2=(
    0.0, -40.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, -40.0), point2=
    (200.0, -40.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 40.0), point2=(
    200.0, 40.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(200.0, 40.0), 
    point2=(200.0, -40.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(200.0, -40.0), 
    point2=(260.0, -40.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(200.0, 40.0), 
    point2=(260.0, 40.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].ArcByCenterEnds(center=(260.0, 
    0.0), direction=COUNTERCLOCKWISE, point1=(260.0, -40.0), point2=(260.0, 
    40.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-1'].BaseShellExtrude(depth=2000.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
# Save by adrie on 2024_11_04-23.55.01; build 2024 2023_09_21-13.55.25 RELr426 190762
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].Material(name='AL')
mdb.models['Model-1'].materials['AL'].Elastic(table=((73100.0, 0.305), ))
mdb.models['Model-1'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='AL', name='skin', nodalThicknessField=''
    , numIntPts=3, poissonDefinition=DEFAULT, preIntegrate=OFF, temperature=
    GRADIENT, thickness=0.8, thicknessField='', thicknessModulus=None, 
    thicknessType=UNIFORM, useDensity=OFF)
mdb.models['Model-1'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='AL', name='rear spar', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=1.6, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['Model-1'].sections['skin'].setValues(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='AL', nodalThicknessField='', numIntPts=5
    , preIntegrate=OFF, thickness=0.8, thicknessField='', thicknessType=
    UNIFORM)
mdb.models['Model-1'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='AL', name='front spar', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=2.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['Model-1'].parts.changeKey(fromName='Part-1', toName='wing')
mdb.models['Model-1'].parts['wing'].Set(faces=
    mdb.models['Model-1'].parts['wing'].faces.getSequenceFromMask(('[#5e ]', ), 
    ), name='skin')
mdb.models['Model-1'].parts['wing'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['wing'].sets['skin'], sectionName='skin', 
    thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['wing'].Set(faces=
    mdb.models['Model-1'].parts['wing'].faces.getSequenceFromMask(('[#20 ]', ), 
    ), name='rear spar')
mdb.models['Model-1'].parts['wing'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['wing'].sets['rear spar'], sectionName=
    'rear spar', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['wing'].Set(faces=
    mdb.models['Model-1'].parts['wing'].faces.getSequenceFromMask(('[#1 ]', ), 
    ), name='front spar')
mdb.models['Model-1'].parts['wing'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['wing'].sets['front spar'], sectionName=
    'front spar', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['wing'].flipNormal(regions=Region(
    faces=mdb.models['Model-1'].parts['wing'].faces.getSequenceFromMask(mask=(
    '[#e ]', ), )))
mdb.models['Model-1'].parts['wing'].MaterialOrientation(additionalRotationType=
    ROTATION_NONE, axis=AXIS_2, fieldName='', localCsys=None, orientationType=
    GLOBAL, region=Region(
    faces=mdb.models['Model-1'].parts['wing'].faces.getSequenceFromMask(mask=(
    '[#7f ]', ), )))
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=OFF, name='wing-1', part=
    mdb.models['Model-1'].parts['wing'])
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=
    mdb.models['Model-1'].rootAssembly.instances['wing-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['wing-1'].edges[7], MIDDLE))
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=(143.8665, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=(143.8665, 0.0, 
    2000.0))
mdb.models['Model-1'].rootAssembly.deleteFeatures(('RP-2', 'RP-1'))
# Save by adrie on 2024_11_05-00.50.46; build 2024 2023_09_21-13.55.25 RELr426 190762
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.features['RP-3'].setValues(yValue=1000.0)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.features['RP-3'].setValues(yValue=-1000.0)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.features['RP-3'].setValues(yValue=0.0)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.features['RP-3'].setValues(yValue=19.0)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.features['RP-3'].setValues(yValue=20.0)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.features['RP-3'].setValues(yValue=0.0)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.features['RP-3'].setValues(zValue=1000.0)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
# Save by adrie on 2024_11_05-21.06.01; build 2024 2023_09_21-13.55.25 RELr426 190762
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.features['RP-3'].setValues(zValue=2000.0)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.DatumPlaneByOffset(plane=
    mdb.models['Model-1'].rootAssembly.instances['wing-1'].faces[0], point=
    mdb.models['Model-1'].rootAssembly.instances['wing-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['wing-1'].edges[3], MIDDLE))
del mdb.models['Model-1'].rootAssembly.features['Datum plane-1']
mdb.models['Model-1'].rootAssembly.Set(name='reference point', referencePoints=
    (mdb.models['Model-1'].rootAssembly.referencePoints[6], ))
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['wing-1'].edges.getSequenceFromMask(
    ('[#49490 ]', ), ), name='tip')
mdb.models['Model-1'].rootAssembly.DatumPlaneByTwoPoint(point1=
    mdb.models['Model-1'].rootAssembly.instances['wing-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['wing-1'].edges[3], MIDDLE), 
    point2=
    mdb.models['Model-1'].rootAssembly.instances['wing-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['wing-1'].edges[1], MIDDLE))
del mdb.models['Model-1'].rootAssembly.features['Datum plane-1']
mdb.models['Model-1'].rootAssembly.DatumPlaneByTwoPoint(point1=
    mdb.models['Model-1'].rootAssembly.instances['wing-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['wing-1'].edges[16], MIDDLE), 
    point2=
    mdb.models['Model-1'].rootAssembly.instances['wing-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['wing-1'].edges[3], MIDDLE))
del mdb.models['Model-1'].rootAssembly.features['Datum plane-1']
mdb.models['Model-1'].rootAssembly.DatumPlaneByPrincipalPlane(offset=1000.0, 
    principalPlane=XYPLANE)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.PartitionFaceByDatumPlane(datumPlane=
    mdb.models['Model-1'].rootAssembly.datums[12], faces=
    mdb.models['Model-1'].rootAssembly.instances['wing-1'].faces.getSequenceFromMask(
    ('[#7f ]', ), ))
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['wing-1'].edges.getSequenceFromMask(
    ('[#151111 ]', ), ), name='root')
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['wing-1'].edges.getSequenceFromMask(
    ('[#51084040 #1 ]', ), ), name='tip')
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['wing-1'], ), size=10.0)
mdb.models['Model-1'].rootAssembly.setMeshControls(elemShape=QUAD, regions=
    mdb.models['Model-1'].rootAssembly.instances['wing-1'].faces.getSequenceFromMask(
    ('[#3fff ]', ), ), technique=STRUCTURED)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['wing-1'], ))
mdb.models['Model-1'].MultipointConstraint(controlPoint=
    mdb.models['Model-1'].rootAssembly.sets['reference point'], csys=None, 
    mpcType=BEAM_MPC, name='Constraint-1', surface=
    mdb.models['Model-1'].rootAssembly.sets['tip'], userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['Model-1'].StaticLinearPerturbationStep(name=
    'static linear analysis', previous='Initial')
mdb.models['Model-1'].Moment(cm1=10000.0, createStepName=
    'static linear analysis', distributionType=UNIFORM, field='', localCsys=
    None, name='Load-1', region=
    mdb.models['Model-1'].rootAssembly.sets['reference point'])
mdb.models['Model-1'].EncastreBC(createStepName='static linear analysis', 
    localCsys=None, name='BC-1', region=
    mdb.models['Model-1'].rootAssembly.sets['root'])
# Save by adrie on 2024_11_05-23.47.11; build 2024 2023_09_21-13.55.25 RELr426 190762
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].fieldOutputRequests['F-Output-1'].setValues(
    sectionPoints=(1, 2, 3))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'jobName': 'Job-1', 'clientHost': 'Adriel', 'handle': 0})
mdb.jobs['Job-1']._Message(ODB_FILE, {'file': 'C:\\temp\\Job-1.odb', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'message': 'Analysis phase complete', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'clientHost': 'Adriel', 'handle': 28540})
mdb.jobs['Job-1']._Message(STEP, {'stepId': 1, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'step': 0, 'frame': 0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {
    'message': 'The 3-direction at one or more points in one or more layers in 6400 elements as defined in *ORIENTATION are in the opposite direction to the element normals. Either the 1 or 2 and the 3-direction defined in *ORIENTATION will be reversed. The elements have been identified in element set WarnElem3DirOppElemNormalStep1Inc1.', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {
    'message': 'The local-3 direction (after additional rotation and permutation) of the material orientation , specified via *ORIENTATION, is in the plane of the SHELL, MEMBRANE, GASKET, COHESIVE, or SURFACE element. The local-1 direction will be projected onto the element surface and the positive element normal will be used as the local-3 direction. The elements have been identified in element set WarnElemUserNormMatOrient.', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'memory': 322.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'physical_memory': 32582.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 48.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'step': 0, 'frame': 1, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'step': 1, 'increment': 1, 'attempts': 1, 
    'severe': 0, 'equilibrium': 1, 'iterations': 1, 'totalTime': 0.0, 
    'stepTime': 2.22e-16, 'timeIncrement': 2.22e-16, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(END_STEP, {'stepId': 1, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'message': 'Analysis phase complete', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Nov  5 23:52:55 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].sections['front spar'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='AL', 
    nodalThicknessField='', numIntPts=3, preIntegrate=OFF, thickness=2.0, 
    thicknessField='', thicknessType=UNIFORM)
mdb.models['Model-1'].sections['rear spar'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='AL', 
    nodalThicknessField='', numIntPts=3, preIntegrate=OFF, thickness=1.6, 
    thicknessField='', thicknessType=UNIFORM)
mdb.models['Model-1'].sections['skin'].setValues(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='AL', nodalThicknessField='', numIntPts=3
    , preIntegrate=OFF, thickness=0.8, thicknessField='', thicknessType=
    UNIFORM)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['wing-1'], ))
mdb.models['Model-1'].loads['Load-1'].setValues(cm1=0.0, cm2=10000.0, 
    distributionType=UNIFORM, field='')
mdb.models['Model-1'].loads['Load-1'].setValues(cm2=0.0, cm3=10000.0, 
    distributionType=UNIFORM, field='')
del mdb.jobs['Job-1']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'jobName': 'Job-1', 'clientHost': 'Adriel', 'handle': 0})
mdb.jobs['Job-1']._Message(ODB_FILE, {'file': 'C:\\temp\\Job-1.odb', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'message': 'Analysis phase complete', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'clientHost': 'Adriel', 'handle': 12808})
mdb.jobs['Job-1']._Message(STEP, {'stepId': 1, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'step': 0, 'frame': 0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {
    'message': 'The 3-direction at one or more points in one or more layers in 6400 elements as defined in *ORIENTATION are in the opposite direction to the element normals. Either the 1 or 2 and the 3-direction defined in *ORIENTATION will be reversed. The elements have been identified in element set WarnElem3DirOppElemNormalStep1Inc1.', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {
    'message': 'The local-3 direction (after additional rotation and permutation) of the material orientation , specified via *ORIENTATION, is in the plane of the SHELL, MEMBRANE, GASKET, COHESIVE, or SURFACE element. The local-1 direction will be projected onto the element surface and the positive element normal will be used as the local-3 direction. The elements have been identified in element set WarnElemUserNormMatOrient.', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'memory': 316.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'physical_memory': 32582.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 48.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'step': 0, 'frame': 1, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'step': 1, 'increment': 1, 'attempts': 1, 
    'severe': 0, 'equilibrium': 1, 'iterations': 1, 'totalTime': 0.0, 
    'stepTime': 2.22e-16, 'timeIncrement': 2.22e-16, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(END_STEP, {'stepId': 1, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'message': 'Analysis phase complete', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Wed Nov  6 00:08:20 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].parts['wing'].flipNormal(regions=Region(
    faces=mdb.models['Model-1'].parts['wing'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), )))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['wing-1'], ))
del mdb.jobs['Job-1']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'jobName': 'Job-1', 'clientHost': 'Adriel', 'handle': 0})
mdb.jobs['Job-1']._Message(ODB_FILE, {'file': 'C:\\temp\\Job-1.odb', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'message': 'Analysis phase complete', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'clientHost': 'Adriel', 'handle': 22816})
mdb.jobs['Job-1']._Message(STEP, {'stepId': 1, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'step': 0, 'frame': 0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {
    'message': 'The 3-direction at one or more points in one or more layers in 6400 elements as defined in *ORIENTATION are in the opposite direction to the element normals. Either the 1 or 2 and the 3-direction defined in *ORIENTATION will be reversed. The elements have been identified in element set WarnElem3DirOppElemNormalStep1Inc1.', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {
    'message': 'The local-3 direction (after additional rotation and permutation) of the material orientation , specified via *ORIENTATION, is in the plane of the SHELL, MEMBRANE, GASKET, COHESIVE, or SURFACE element. The local-1 direction will be projected onto the element surface and the positive element normal will be used as the local-3 direction. The elements have been identified in element set WarnElemUserNormMatOrient.', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'memory': 316.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'physical_memory': 32582.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 48.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'step': 0, 'frame': 1, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'step': 1, 'increment': 1, 'attempts': 1, 
    'severe': 0, 'equilibrium': 1, 'iterations': 1, 'totalTime': 0.0, 
    'stepTime': 2.22e-16, 'timeIncrement': 2.22e-16, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(END_STEP, {'stepId': 1, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'message': 'Analysis phase complete', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Wed Nov  6 00:12:55 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].parts['wing'].MaterialOrientation(additionalRotationType=
    ROTATION_NONE, axis=AXIS_2, fieldName='', localCsys=None, orientationType=
    GLOBAL, region=Region(
    faces=mdb.models['Model-1'].parts['wing'].faces.getSequenceFromMask(mask=(
    '[#7f ]', ), )))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['wing-1'], ))
del mdb.jobs['Job-1']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'jobName': 'Job-1', 'clientHost': 'Adriel', 'handle': 0})
mdb.jobs['Job-1']._Message(ODB_FILE, {'file': 'C:\\temp\\Job-1.odb', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'message': 'Analysis phase complete', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'clientHost': 'Adriel', 'handle': 15272})
mdb.jobs['Job-1']._Message(STEP, {'stepId': 1, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'step': 0, 'frame': 0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {
    'message': 'The 3-direction at one or more points in one or more layers in 6400 elements as defined in *ORIENTATION are in the opposite direction to the element normals. Either the 1 or 2 and the 3-direction defined in *ORIENTATION will be reversed. The elements have been identified in element set WarnElem3DirOppElemNormalStep1Inc1.', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {
    'message': 'The local-3 direction (after additional rotation and permutation) of the material orientation , specified via *ORIENTATION, is in the plane of the SHELL, MEMBRANE, GASKET, COHESIVE, or SURFACE element. The local-1 direction will be projected onto the element surface and the positive element normal will be used as the local-3 direction. The elements have been identified in element set WarnElemUserNormMatOrient.', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'memory': 316.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'physical_memory': 32582.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 48.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'step': 0, 'frame': 1, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'step': 1, 'increment': 1, 'attempts': 1, 
    'severe': 0, 'equilibrium': 1, 'iterations': 1, 'totalTime': 0.0, 
    'stepTime': 2.22e-16, 'timeIncrement': 2.22e-16, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(END_STEP, {'stepId': 1, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'message': 'Analysis phase complete', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Wed Nov  6 00:15:26 2024', 
    'jobName': 'Job-1'})
# Save by adrie on 2024_11_06-00.21.28; build 2024 2023_09_21-13.55.25 RELr426 190762
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['wing'].features['Shell extrude-1'].sketch)
mdb.models['Model-1'].parts['wing'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['wing'].features['Shell extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['wing'].features['Shell extrude-1'].sketch)
mdb.models['Model-1'].parts['wing'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['wing'].features['Shell extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=400.0)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, -40.5), point2=
    (0.0, 40.5))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 40.5), point2=(
    17.4, 40.5))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(17.4, 40.5), point2=
    (304.06, 40.5))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[3], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(304.06, 40.5), 
    point2=(321.33, 40.5))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(304.06, 40.5), 
    point2=(304.06, -40.5))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(304.06, -40.5), 
    point2=(321.33, -40.5))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, -40.5), point2=
    (304.06, -40.5))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 40.5), point2=(
    -123.0, 22.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, -40.5), point2=
    (-123.0, -22.0))
mdb.models['Model-1'].sketches['__profile__'].Arc3Points(point1=(-123.0, 22.0), 
    point2=(-123.0, -22.0), point3=(-145.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], ))
mdb.models['Model-1'].sketches['__profile__'].ArcByCenterEnds(center=(-123.0, 
    0.0), direction=CLOCKWISE, point1=(-145.0, 0.0), point2=(-123.0, 22.0))
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='experimental wing', 
    type=DEFORMABLE_BODY)
mdb.models['Model-1'].parts['experimental wing'].BaseShellExtrude(depth=1442.72
    , sketch=mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].Material(name='AL_2024_T3')
mdb.models['Model-1'].materials['AL_2024_T3'].Elastic(table=((28000.0, 0.0), ))
mdb.models['Model-1'].materials['AL_2024_T3'].elastic.setValues(table=((
    28000.0, 0.33), ))
mdb.models['Model-1'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='AL_2024_T3', name='experiment_skin', 
    nodalThicknessField='', numIntPts=3, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=0.64, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['Model-1'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='AL_2024_T3', name=
    'experimental_front_spar', nodalThicknessField='', numIntPts=3, 
    poissonDefinition=DEFAULT, preIntegrate=OFF, temperature=GRADIENT, 
    thickness=1.7, thicknessField='', thicknessModulus=None, thicknessType=
    UNIFORM, useDensity=OFF)
mdb.models['Model-1'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='AL_2024_T3', name=
    'experimental_rear_spar', nodalThicknessField='', numIntPts=3, 
    poissonDefinition=DEFAULT, preIntegrate=OFF, temperature=GRADIENT, 
    thickness=1.59, thicknessField='', thicknessModulus=None, thicknessType=
    UNIFORM, useDensity=OFF)
mdb.models['Model-1'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='AL_2024_T3', name=
    'experimental_front_flange', nodalThicknessField='', numIntPts=3, 
    poissonDefinition=DEFAULT, preIntegrate=OFF, temperature=GRADIENT, 
    thickness=2.34, thicknessField='', thicknessModulus=None, thicknessType=
    UNIFORM, useDensity=OFF)
mdb.models['Model-1'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='AL_2024_T3', name=
    'experimental_rear_flange', nodalThicknessField='', numIntPts=3, 
    poissonDefinition=DEFAULT, preIntegrate=OFF, temperature=GRADIENT, 
    thickness=2.23, thicknessField='', thicknessModulus=None, thicknessType=
    UNIFORM, useDensity=OFF)
mdb.models['Model-1'].parts['experimental wing'].DatumPlaneByOffset(flip=SIDE2, 
    offset=17.4, plane=
    mdb.models['Model-1'].parts['experimental wing'].faces[0])
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['experimental wing'].features['Shell extrude-1'].sketch)
mdb.models['Model-1'].parts['experimental wing'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['experimental wing'].features['Shell extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['experimental wing'].Set(faces=
    mdb.models['Model-1'].parts['experimental wing'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), name='front_spar')
mdb.models['Model-1'].parts['experimental wing'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['experimental wing'].sets['front_spar'], 
    sectionName='experimental_front_spar', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['experimental wing'].Set(faces=
    mdb.models['Model-1'].parts['experimental wing'].faces.getSequenceFromMask(
    ('[#4 ]', ), ), name='rear_spar')
mdb.models['Model-1'].parts['experimental wing'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['experimental wing'].sets['rear_spar'], 
    sectionName='experimental_rear_spar', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['experimental wing'].Set(faces=
    mdb.models['Model-1'].parts['experimental wing'].faces.getSequenceFromMask(
    ('[#180 ]', ), ), name='rear_flange')
mdb.models['Model-1'].parts['experimental wing'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['experimental wing'].sets['rear_flange'], 
    sectionName='experimental_rear_flange', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['experimental wing'].features['Shell extrude-1'].sketch)
mdb.models['Model-1'].parts['experimental wing'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['experimental wing'].features['Shell extrude-1'])
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[8], ))
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(0.0, -40.5), point2=(
    17.4, -40.5))
mdb.models['Model-1'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__edit__'].geometry[12])
mdb.models['Model-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry[12])
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(17.4, -40.5), point2=(
    304.06, -40.5))
mdb.models['Model-1'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__edit__'].geometry[13])
mdb.models['Model-1'].sketches['__edit__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].geometry[12], 
    entity2=mdb.models['Model-1'].sketches['__edit__'].geometry[13])
mdb.models['Model-1'].parts['experimental wing'].features['Shell extrude-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['experimental wing'].regenerate()
del mdb.models['Model-1'].parts['experimental wing'].features['Datum plane-1']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['experimental wing'].features['Shell extrude-1'].sketch)
mdb.models['Model-1'].parts['experimental wing'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['experimental wing'].features['Shell extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['experimental wing'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['experimental wing'].features['Shell extrude-1'].sketch)
mdb.models['Model-1'].parts['experimental wing'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['experimental wing'].features['Shell extrude-1'])
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(17.4, 40.5), point2=(
    17.4, -40.5))
mdb.models['Model-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__edit__'].geometry[14])
mdb.models['Model-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry[14])
mdb.models['Model-1'].parts['experimental wing'].features['Shell extrude-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['experimental wing'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['experimental wing'].features['Shell extrude-1'].sketch)
mdb.models['Model-1'].parts['experimental wing'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['experimental wing'].features['Shell extrude-1'])
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[14], ))
mdb.models['Model-1'].parts['experimental wing'].features['Shell extrude-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['experimental wing'].regenerate()
mdb.models['Model-1'].parts['experimental wing'].DatumPlaneByOffset(flip=SIDE2, 
    offset=17.4, plane=
    mdb.models['Model-1'].parts['experimental wing'].faces[0])
mdb.models['Model-1'].parts['experimental wing'].PartitionFaceByDatumPlane(
    datumPlane=mdb.models['Model-1'].parts['experimental wing'].datums[6], 
    faces=
    mdb.models['Model-1'].parts['experimental wing'].faces.getSequenceFromMask(
    ('[#a ]', ), ))
mdb.models['Model-1'].parts['experimental wing'].Set(faces=
    mdb.models['Model-1'].parts['experimental wing'].faces.getSequenceFromMask(
    ('[#1e8 ]', ), ), name='skin')
mdb.models['Model-1'].parts['experimental wing'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['experimental wing'].sets['skin'], sectionName=
    'experiment_skin', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['experimental wing'].Set(faces=
    mdb.models['Model-1'].parts['experimental wing'].faces.getSequenceFromMask(
    ('[#3 ]', ), ), name='front_flange')
mdb.models['Model-1'].parts['experimental wing'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['experimental wing'].sets['front_flange'], 
    sectionName='experimental_front_flange', thicknessAssignment=FROM_SECTION)
# Save by adrie on 2024_11_07-00.12.21; build 2024 2023_09_21-13.55.25 RELr426 190762
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['experimental wing'].flipNormal(regions=Region(
    faces=mdb.models['Model-1'].parts['experimental wing'].faces.getSequenceFromMask(
    mask=('[#7c0 ]', ), )))
mdb.models['Model-1'].parts['experimental wing'].flipNormal(regions=Region(
    faces=mdb.models['Model-1'].parts['experimental wing'].faces.getSequenceFromMask(
    mask=('[#400 ]', ), )))
mdb.models['Model-1'].parts['experimental wing'].MaterialOrientation(
    additionalRotationType=ROTATION_NONE, axis=AXIS_2, fieldName='', localCsys=
    None, orientationType=GLOBAL, region=Region(
    faces=mdb.models['Model-1'].parts['experimental wing'].faces.getSequenceFromMask(
    mask=('[#7ff ]', ), )))
mdb.models['Model-1'].rootAssembly.Instance(dependent=OFF, name=
    'experimental wing-1', part=
    mdb.models['Model-1'].parts['experimental wing'])
del mdb.models['Model-1'].rootAssembly.features['experimental wing-1']
mdb.models['Model-1'].rootAssembly.Instance(dependent=OFF, name=
    'experimental wing-1', part=
    mdb.models['Model-1'].parts['experimental wing'])
mdb.models['Model-1'].rootAssembly.features['wing-1'].suppress()
mdb.models['Model-1'].rootAssembly.features['wing-1'].resume()
mdb.models['Model-1'].rootAssembly.features['wing-1'].suppress()
mdb.models['Model-1'].rootAssembly.features['Datum plane-1'].suppress()
mdb.models['Model-1'].rootAssembly.features['RP-3'].suppress()
mdb.models['Model-1'].rootAssembly.features['Datum csys-1'].suppress()
del mdb.models['Model-1'].rootAssembly.features['Datum csys-1']
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['experimental wing-1'].edges.getSequenceFromMask(
    ('[#25262528 ]', ), ), name='experimental_tip')
mdb.models['Model-1'].rootAssembly.DatumPlaneByPrincipalPlane(offset=881.37, 
    principalPlane=XYPLANE)
del mdb.models['Model-1'].rootAssembly.features['Datum plane-2']
mdb.models['Model-1'].rootAssembly.DatumPlaneByPrincipalPlane(offset=541.35, 
    principalPlane=XYPLANE)
mdb.models['Model-1'].rootAssembly.PartitionFaceByDatumPlane(datumPlane=
    mdb.models['Model-1'].rootAssembly.datums[24], faces=
    mdb.models['Model-1'].rootAssembly.instances['experimental wing-1'].faces.getSequenceFromMask(
    ('[#7ff ]', ), ))
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['experimental wing-1'].edges.getSequenceFromMask(
    ('[#49224511 #2 ]', ), ), name='experimental_strain_gauge_position')
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=(151.66, 40.5, 541.35))
mdb.models['Model-1'].rootAssembly.features.changeKey(fromName='RP-1', toName=
    'RP_FGH')
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=(151.66, -40.5, 
    541.35))
mdb.models['Model-1'].rootAssembly.features.changeKey(fromName='RP-1', toName=
    'RP_IJK')
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=(0.0, 0.0, 541.35))
mdb.models['Model-1'].rootAssembly.features.changeKey(fromName='RP-1', toName=
    'RP_CDE')
# Save by adrie on 2024_11_07-00.28.38; build 2024 2023_09_21-13.55.25 RELr426 190762
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['experimental wing-1'], ), 
    size=10.0)
mdb.models['Model-1'].rootAssembly.setMeshControls(elemShape=QUAD, regions=
    mdb.models['Model-1'].rootAssembly.instances['experimental wing-1'].faces.getSequenceFromMask(
    ('[#3fffff ]', ), ), technique=STRUCTURED)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['experimental wing-1'], ))
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['experimental wing-1'].edges.getSequenceFromMask(
    ('[#24080244 #2314 ]', ), ), name='experimental_end')
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(region=
    mdb.models['Model-1'].rootAssembly.sets['experimental_end'])
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=(0.0, 0.0, 1442.72))
mdb.models['Model-1'].rootAssembly.features.changeKey(fromName='RP-1', toName=
    'RP_experimental_shear_center')
mdb.models['Model-1'].rootAssembly.Set(name='RP_experimental_shear_center', 
    referencePoints=(mdb.models['Model-1'].rootAssembly.referencePoints[33], ))
mdb.models['Model-1'].constraints['Constraint-1'].setValues(controlPoint=
    mdb.models['Model-1'].rootAssembly.sets['RP_experimental_shear_center'], 
    surface=mdb.models['Model-1'].rootAssembly.sets['experimental_tip'])
mdb.models['Model-1'].loads['Load-1'].setValues(distributionType=UNIFORM, 
    field='', region=
    mdb.models['Model-1'].rootAssembly.sets['RP_experimental_shear_center'])
# Save by adrie on 2024_11_07-00.50.08; build 2024 2023_09_21-13.55.25 RELr426 190762
# Save by adrie on 2024_11_07-00.57.02; build 2024 2023_09_21-13.55.25 RELr426 190762
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-1'].constraints['Constraint-1']
del mdb.models['Model-1'].loads['Load-1']
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=(304.06, -40.5, 
    1442.72))
mdb.models['Model-1'].rootAssembly.features.changeKey(fromName='RP-1', toName=
    'RP_RearLoadPoint')
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=(0.0, -40.5, 1442.72))
mdb.models['Model-1'].rootAssembly.features.changeKey(fromName='RP-1', toName=
    'RP_FrontLoadPoint')
mdb.models['Model-1'].rootAssembly.Set(name='RP_RearLoadPoint', 
    referencePoints=(mdb.models['Model-1'].rootAssembly.referencePoints[35], ))
del mdb.models['Model-1'].rootAssembly.sets['RP_experimental_shear_center']
mdb.models['Model-1'].rootAssembly.Set(name='RP_FrontLoadPoint', 
    referencePoints=(mdb.models['Model-1'].rootAssembly.referencePoints[36], ))
del mdb.models['Model-1'].rootAssembly.features['RP_experimental_shear_center']
mdb.models['Model-1'].ConcentratedForce(cf1=13.5276, createStepName=
    'static linear analysis', distributionType=UNIFORM, field='', localCsys=
    None, name='Load-1', region=
    mdb.models['Model-1'].rootAssembly.sets['RP_RearLoadPoint'])
mdb.models['Model-1'].loads['Load-1'].setValues(cf1=0.0, cf2=13.5276, 
    distributionType=UNIFORM, field='')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job_EXP_RearLoad', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job_EXP_RearLoad'].submit(consistencyChecking=OFF)
mdb.jobs['Job_EXP_RearLoad']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'jobName': 'Job_EXP_RearLoad', 'clientHost': 'Adriel', 'handle': 0})
mdb.jobs['Job_EXP_RearLoad']._Message(WARNING, {
    'message': 'NODE SET ASSEMBLY_RP_FRONTLOADPOINT HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(WARNING, {
    'message': 'NODE SET ASSEMBLY_RP_REARLOADPOINT HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE SET ASSEMBLY_RP_REARLOADPOINT HAS NOT BEEN DEFINED', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'A CONCENTRATED LOAD HAS BEEN SPECIFIED ON NODE SET ASSEMBLY_RP_REARLOADPOINT.  THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE SET ASSEMBLY_RP_REARLOADPOINT HAS NOT BEEN DEFINED', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'A CONCENTRATED LOAD HAS BEEN SPECIFIED ON NODE SET ASSEMBLY_RP_REARLOADPOINT.  THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ODB_FILE, {
    'file': 'C:\\temp\\Job_EXP_RearLoad.odb', 'phase': BATCHPRE_PHASE, 
    'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ABORTED, {
    'message': 'Analysis phase failed due to errors', 'phase': BATCHPRE_PHASE, 
    'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job_EXP_RearLoad.dat file for possible error messages if the file exists.', 
    'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job_EXP_RearLoad.dat file for possible error messages if the file exists.', 
    'jobName': 'Job_EXP_RearLoad'})
mdb.models['Model-1'].loads['Load-1'].setValues(distributionType=UNIFORM, 
    field='', region=
    mdb.models['Model-1'].rootAssembly.sets['RP_RearLoadPoint'])
mdb.models['Model-1'].RigidBody(name='Constraint-RearLoadPoint', pinRegion=
    mdb.models['Model-1'].rootAssembly.sets['experimental_tip'], 
    refPointRegion=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[35], )))
mdb.models['Model-1'].constraints['Constraint-RearLoadPoint'].setValues(
    refPointRegion=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[35], )))
mdb.models['Model-1'].RigidBody(name='Constraint-FrontLoadPoint', pinRegion=
    mdb.models['Model-1'].rootAssembly.sets['experimental_tip'], 
    refPointRegion=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[36], )))
mdb.jobs['Job_EXP_RearLoad'].submit(consistencyChecking=OFF)
mdb.jobs['Job_EXP_RearLoad']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'jobName': 'Job_EXP_RearLoad', 'clientHost': 'Adriel', 'handle': 0})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 10 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 11 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 13 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 18 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 23 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 26 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 27 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 28 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 29 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 30 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 378 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 379 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 380 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 381 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 382 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 383 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 384 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 385 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 386 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 387 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 388 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 389 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 390 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 391 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 392 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 393 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 394 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 395 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 396 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 397 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 398 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 399 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 400 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 401 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 402 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 403 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 404 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 405 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 585 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 715 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 716 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 717 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 718 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 719 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 720 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 721 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 722 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 723 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 724 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 725 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'Error message limit reached. No further error messages will be reported.\nPlease see the dat file for more errors.', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ODB_FILE, {
    'file': 'C:\\temp\\Job_EXP_RearLoad.odb', 'phase': BATCHPRE_PHASE, 
    'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ABORTED, {
    'message': 'Analysis phase failed due to errors', 'phase': BATCHPRE_PHASE, 
    'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job_EXP_RearLoad.dat file for possible error messages if the file exists.', 
    'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job_EXP_RearLoad.dat file for possible error messages if the file exists.', 
    'jobName': 'Job_EXP_RearLoad'})
mdb.models['Model-1'].rootAssembly.deleteFeatures(('wing-1', 
    'Partition face-1'))
del mdb.models['Model-1'].rootAssembly.features['RP-3']
del mdb.models['Model-1'].rootAssembly.features['Datum plane-1']
del mdb.models['Model-1'].parts['wing']
mdb.jobs['Job_EXP_RearLoad'].submit(consistencyChecking=OFF)
mdb.jobs['Job_EXP_RearLoad']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'jobName': 'Job_EXP_RearLoad', 'clientHost': 'Adriel', 'handle': 0})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 10 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 11 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 13 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 18 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 23 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 26 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 27 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 28 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 29 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 30 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 378 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 379 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 380 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 381 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 382 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 383 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 384 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 385 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 386 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 387 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 388 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 389 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 390 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 391 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 392 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 393 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 394 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 395 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 396 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 397 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 398 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 399 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 400 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 401 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 402 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 403 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 404 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 405 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 585 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 715 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 716 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 717 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 718 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 719 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 720 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 721 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 722 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 723 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 724 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 725 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'Error message limit reached. No further error messages will be reported.\nPlease see the dat file for more errors.', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ODB_FILE, {
    'file': 'C:\\temp\\Job_EXP_RearLoad.odb', 'phase': BATCHPRE_PHASE, 
    'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ABORTED, {
    'message': 'Analysis phase failed due to errors', 'phase': BATCHPRE_PHASE, 
    'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job_EXP_RearLoad.dat file for possible error messages if the file exists.', 
    'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job_EXP_RearLoad.dat file for possible error messages if the file exists.', 
    'jobName': 'Job_EXP_RearLoad'})
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['experimental wing-1'], ))
mdb.jobs['Job_EXP_RearLoad'].submit(consistencyChecking=OFF)
mdb.jobs['Job_EXP_RearLoad']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'jobName': 'Job_EXP_RearLoad', 'clientHost': 'Adriel', 'handle': 0})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 10 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 11 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 13 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 18 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 23 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 26 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 27 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 28 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 29 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 30 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 378 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 379 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 380 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 381 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 382 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 383 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 384 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 385 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 386 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 387 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 388 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 389 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 390 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 391 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 392 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 393 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 394 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 395 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 396 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 397 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 398 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 399 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 400 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 401 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 402 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 403 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 404 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 405 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 585 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 715 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 716 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 717 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 718 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 719 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 720 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 721 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 722 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 723 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 724 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 725 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'Error message limit reached. No further error messages will be reported.\nPlease see the dat file for more errors.', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ODB_FILE, {
    'file': 'C:\\temp\\Job_EXP_RearLoad.odb', 'phase': BATCHPRE_PHASE, 
    'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ABORTED, {
    'message': 'Analysis phase failed due to errors', 'phase': BATCHPRE_PHASE, 
    'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job_EXP_RearLoad.dat file for possible error messages if the file exists.', 
    'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job_EXP_RearLoad.dat file for possible error messages if the file exists.', 
    'jobName': 'Job_EXP_RearLoad'})
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.deleteFeatures(('experimental wing-1', 
    'Partition face-2'))
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'experimental wing-1', part=
    mdb.models['Model-1'].parts['experimental wing'])
del mdb.models['Model-1'].rootAssembly.features['experimental wing-1']
mdb.models['Model-1'].rootAssembly.Instance(dependent=OFF, name=
    'experimental wing-1', part=
    mdb.models['Model-1'].parts['experimental wing'])
mdb.models['Model-1'].rootAssembly.PartitionFaceByDatumPlane(datumPlane=
    mdb.models['Model-1'].rootAssembly.datums[24], faces=
    mdb.models['Model-1'].rootAssembly.instances['experimental wing-1'].faces.getSequenceFromMask(
    ('[#7ff ]', ), ))
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['experimental wing-1'].edges.getSequenceFromMask(
    ('[#24080244 #2314 ]', ), ), name='experimental_end')
del mdb.models['Model-1'].rootAssembly.sets['tip']
del mdb.models['Model-1'].rootAssembly.sets['root']
del mdb.models['Model-1'].rootAssembly.sets['reference point']
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['experimental wing-1'].edges.getSequenceFromMask(
    ('[#411000 #155481 ]', ), ), name='experimental_tip')
del mdb.models['Model-1'].rootAssembly.sets['experimental_strain_gauge_position']
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['experimental wing-1'], ), 
    size=10.0)
mdb.models['Model-1'].rootAssembly.setMeshControls(elemShape=QUAD, regions=
    mdb.models['Model-1'].rootAssembly.instances['experimental wing-1'].faces.getSequenceFromMask(
    ('[#3fffff ]', ), ), technique=STRUCTURED)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['experimental wing-1'], ))
mdb.jobs['Job_EXP_RearLoad'].submit(consistencyChecking=OFF)
mdb.jobs['Job_EXP_RearLoad']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'jobName': 'Job_EXP_RearLoad', 'clientHost': 'Adriel', 'handle': 0})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 10 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 11 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 13 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 18 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 23 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 26 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 27 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 28 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 29 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 30 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 378 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 379 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 380 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 381 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 382 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 383 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 384 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 385 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 386 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 387 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 388 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 389 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 390 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 391 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 392 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 393 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 394 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 395 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 396 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 397 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 398 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 399 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 400 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 401 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 402 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 403 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 404 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 405 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 585 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 715 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 716 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 717 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 718 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 719 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 720 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 721 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 722 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 723 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 724 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'NODE 725 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'Error message limit reached. No further error messages will be reported.\nPlease see the dat file for more errors.', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ODB_FILE, {
    'file': 'C:\\temp\\Job_EXP_RearLoad.odb', 'phase': BATCHPRE_PHASE, 
    'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ABORTED, {
    'message': 'Analysis phase failed due to errors', 'phase': BATCHPRE_PHASE, 
    'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job_EXP_RearLoad.dat file for possible error messages if the file exists.', 
    'jobName': 'Job_EXP_RearLoad'})
mdb.jobs['Job_EXP_RearLoad']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job_EXP_RearLoad.dat file for possible error messages if the file exists.', 
    'jobName': 'Job_EXP_RearLoad'})
del mdb.models['Model-1'].materials['AL']
mdb.models['Model-1'].parts['experimental wing'].DatumPlaneByPrincipalPlane(
    offset=541.35, principalPlane=XYPLANE)
mdb.models['Model-1'].parts['experimental wing'].PartitionFaceByDatumPlane(
    datumPlane=mdb.models['Model-1'].parts['experimental wing'].datums[13], 
    faces=
    mdb.models['Model-1'].parts['experimental wing'].faces.getSequenceFromMask(
    ('[#7ff ]', ), ))
mdb.models['Model-1'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Datum plane-2', 
    'Partition face-1'))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['experimental wing-1'].faces.getSequenceFromMask(
    ('[#3fffff ]', ), ))
mdb.models['Model-1'].rootAssembly.setMeshControls(elemShape=QUAD, regions=
    mdb.models['Model-1'].rootAssembly.instances['experimental wing-1'].faces.getSequenceFromMask(
    ('[#3fffff ]', ), ), technique=STRUCTURED)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['experimental wing-1'], ))
del mdb.jobs['Job_EXP_RearLoad']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-exp_rear', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job-exp_rear'].submit(consistencyChecking=OFF)
mdb.jobs['Job-exp_rear']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'jobName': 'Job-exp_rear', 'clientHost': 'Adriel', 'handle': 0})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 10 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 11 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 13 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 18 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 23 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 26 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 27 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 28 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 29 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 30 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 378 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 379 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 380 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 381 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 382 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 383 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 384 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 385 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 386 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 387 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 388 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 389 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 390 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 391 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 392 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 393 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 394 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 395 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 396 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 397 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 398 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 399 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 400 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 401 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 402 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 403 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 404 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 405 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 585 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 715 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 716 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 717 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 718 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 719 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 720 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 721 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 722 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 723 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 724 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'NODE 725 INSTANCE experimental wing-1 HAS TWO RIGID BODY REFERENCE NODES 5 (ASSEMBLY) AND 4 (ASSEMBLY). A NODE MAY BE ASSOCIATED WITH ONLY ONE RIGID BODY', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'Error message limit reached. No further error messages will be reported.\nPlease see the dat file for more errors.', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ODB_FILE, {
    'file': 'C:\\temp\\Job-exp_rear.odb', 'phase': BATCHPRE_PHASE, 
    'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ABORTED, {
    'message': 'Analysis phase failed due to errors', 'phase': BATCHPRE_PHASE, 
    'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-exp_rear.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-exp_rear.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-exp_rear'})
del mdb.models['Model-1'].constraints['Constraint-FrontLoadPoint']
mdb.jobs['Job-exp_rear'].submit(consistencyChecking=OFF)
mdb.jobs['Job-exp_rear']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'jobName': 'Job-exp_rear', 'clientHost': 'Adriel', 'handle': 0})
mdb.jobs['Job-exp_rear']._Message(WARNING, {
    'message': 'NODE SET ASSEMBLY_RP_FRONTLOADPOINT HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ODB_FILE, {
    'file': 'C:\\temp\\Job-exp_rear.odb', 'phase': BATCHPRE_PHASE, 
    'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(COMPLETED, {
    'message': 'Analysis phase complete', 'phase': BATCHPRE_PHASE, 
    'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-exp_rear', 'clientHost': 'Adriel', 'handle': 20120})
mdb.jobs['Job-exp_rear']._Message(STEP, {'stepId': 1, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ODB_FRAME, {'step': 0, 'frame': 0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(WARNING, {
    'message': 'The 3-direction at one or more points in one or more layers in 6912 elements as defined in *ORIENTATION are in the opposite direction to the element normals. Either the 1 or 2 and the 3-direction defined in *ORIENTATION will be reversed. The elements have been identified in element set WarnElem3DirOppElemNormalStep1Inc1.', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(WARNING, {
    'message': 'The local-3 direction (after additional rotation and permutation) of the material orientation , specified via *ORIENTATION, is in the plane of the SHELL, MEMBRANE, GASKET, COHESIVE, or SURFACE element. The local-1 direction will be projected onto the element surface and the positive element normal will be used as the local-3 direction. The elements have been identified in element set WarnElemUserNormMatOrient.', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(MEMORY_ESTIMATE, {'memory': 325.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(PHYSICAL_MEMORY, {'physical_memory': 32582.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(MINIMUM_MEMORY, {'minimum_memory': 48.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ODB_FRAME, {'step': 0, 'frame': 1, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(STATUS, {'step': 1, 'increment': 1, 
    'attempts': 1, 'severe': 0, 'equilibrium': 1, 'iterations': 1, 
    'totalTime': 0.0, 'stepTime': 2.22e-16, 'timeIncrement': 2.22e-16, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(END_STEP, {'stepId': 1, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(COMPLETED, {
    'message': 'Analysis phase complete', 'phase': STANDARD_PHASE, 
    'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov  7 12:14:51 2024', 'jobName': 'Job-exp_rear'})
mdb.models['Model-1'].constraints['Constraint-RearLoadPoint'].setValues(
    refPointRegion=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[35], )))
mdb.models['Model-1'].loads['Load-1'].setValues(cf2=4.53592, distributionType=
    UNIFORM, field='')
del mdb.models['Model-1'].rootAssembly.features['RP_RearLoadPoint']
del mdb.models['Model-1'].rootAssembly.features['RP_FrontLoadPoint']
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=(0.0, 0.0, 1442.72))
mdb.models['Model-1'].rootAssembly.features.changeKey(fromName='RP-1', toName=
    'RP_shear_center')
del mdb.models['Model-1'].rootAssembly.sets['RP_FrontLoadPoint']
del mdb.models['Model-1'].rootAssembly.sets['RP_RearLoadPoint']
mdb.models['Model-1'].rootAssembly.Set(name='shear_center', referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[54], ))
del mdb.models['Model-1'].constraints['Constraint-RearLoadPoint']
mdb.models['Model-1'].MultipointConstraint(controlPoint=
    mdb.models['Model-1'].rootAssembly.sets['shear_center'], csys=None, 
    mpcType=BEAM_MPC, name='Constraint-1', surface=
    mdb.models['Model-1'].rootAssembly.sets['experimental_tip'], userMode=
    DOF_MODE_MPC, userType=0)
del mdb.models['Model-1'].loads['Load-1']
mdb.models['Model-1'].Moment(cm3=13527.6, createStepName=
    'static linear analysis', distributionType=UNIFORM, field='', localCsys=
    None, name='Load-1', region=
    mdb.models['Model-1'].rootAssembly.sets['shear_center'])
mdb.models['Model-1'].rootAssembly.features['RP_shear_center'].setValues(
    xValue=100.0)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.features['RP_shear_center'].setValues(
    xValue=150.0)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.features['RP_shear_center'].setValues(
    xValue=120.0)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Job-exp_rear'].submit(consistencyChecking=OFF)
mdb.jobs['Job-exp_rear']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'jobName': 'Job-exp_rear', 'clientHost': 'Adriel', 'handle': 0})
mdb.jobs['Job-exp_rear']._Message(ODB_FILE, {
    'file': 'C:\\temp\\Job-exp_rear.odb', 'phase': BATCHPRE_PHASE, 
    'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(COMPLETED, {
    'message': 'Analysis phase complete', 'phase': BATCHPRE_PHASE, 
    'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-exp_rear', 'clientHost': 'Adriel', 'handle': 14312})
mdb.jobs['Job-exp_rear']._Message(STEP, {'stepId': 1, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ODB_FRAME, {'step': 0, 'frame': 0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(WARNING, {
    'message': 'The 3-direction at one or more points in one or more layers in 6912 elements as defined in *ORIENTATION are in the opposite direction to the element normals. Either the 1 or 2 and the 3-direction defined in *ORIENTATION will be reversed. The elements have been identified in element set WarnElem3DirOppElemNormalStep1Inc1.', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(WARNING, {
    'message': 'The local-3 direction (after additional rotation and permutation) of the material orientation , specified via *ORIENTATION, is in the plane of the SHELL, MEMBRANE, GASKET, COHESIVE, or SURFACE element. The local-1 direction will be projected onto the element surface and the positive element normal will be used as the local-3 direction. The elements have been identified in element set WarnElemUserNormMatOrient.', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(MEMORY_ESTIMATE, {'memory': 326.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(PHYSICAL_MEMORY, {'physical_memory': 32582.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(MINIMUM_MEMORY, {'minimum_memory': 48.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(ODB_FRAME, {'step': 0, 'frame': 1, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(STATUS, {'step': 1, 'increment': 1, 
    'attempts': 1, 'severe': 0, 'equilibrium': 1, 'iterations': 1, 
    'totalTime': 0.0, 'stepTime': 2.22e-16, 'timeIncrement': 2.22e-16, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(END_STEP, {'stepId': 1, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(COMPLETED, {
    'message': 'Analysis phase complete', 'phase': STANDARD_PHASE, 
    'jobName': 'Job-exp_rear'})
mdb.jobs['Job-exp_rear']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov  7 12:22:53 2024', 'jobName': 'Job-exp_rear'})
mdb.models['Model-1'].rootAssembly.features['RP_shear_center'].setValues(
    xValue=0.0)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-3', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-3'].submit(consistencyChecking=OFF)
mdb.jobs['Job-3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'jobName': 'Job-3', 'clientHost': 'Adriel', 'handle': 0})
mdb.jobs['Job-3']._Message(WARNING, {
    'message': 'THE BEAM MPC HAS A ZERO LENGTH BETWEEN NODES 1098 INSTANCE experimental wing-1 AND 4 (ASSEMBLY).  IT WILL BE REPLACED WITH A TIE MPC', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FILE, {'file': 'C:\\temp\\Job-3.odb', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(COMPLETED, {'message': 'Analysis phase complete', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-3', 'clientHost': 'Adriel', 'handle': 23032})
mdb.jobs['Job-3']._Message(STEP, {'stepId': 1, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'step': 0, 'frame': 0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {
    'message': 'The 3-direction at one or more points in one or more layers in 6912 elements as defined in *ORIENTATION are in the opposite direction to the element normals. Either the 1 or 2 and the 3-direction defined in *ORIENTATION will be reversed. The elements have been identified in element set WarnElem3DirOppElemNormalStep1Inc1.', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {
    'message': 'The local-3 direction (after additional rotation and permutation) of the material orientation , specified via *ORIENTATION, is in the plane of the SHELL, MEMBRANE, GASKET, COHESIVE, or SURFACE element. The local-1 direction will be projected onto the element surface and the positive element normal will be used as the local-3 direction. The elements have been identified in element set WarnElemUserNormMatOrient.', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(MEMORY_ESTIMATE, {'memory': 326.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(PHYSICAL_MEMORY, {'physical_memory': 32582.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(MINIMUM_MEMORY, {'minimum_memory': 48.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'step': 0, 'frame': 1, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'step': 1, 'increment': 1, 'attempts': 1, 
    'severe': 0, 'equilibrium': 1, 'iterations': 1, 'totalTime': 0.0, 
    'stepTime': 2.22e-16, 'timeIncrement': 2.22e-16, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(END_STEP, {'stepId': 1, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(COMPLETED, {'message': 'Analysis phase complete', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(JOB_COMPLETED, {'time': 'Thu Nov  7 12:25:55 2024', 
    'jobName': 'Job-3'})
mdb.models['Model-1'].rootAssembly.features['RP_shear_center'].setValues(
    xValue=300.0)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-4', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-4'].submit(consistencyChecking=OFF)
mdb.jobs['Job-4']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'jobName': 'Job-4', 'clientHost': 'Adriel', 'handle': 0})
mdb.jobs['Job-4']._Message(ODB_FILE, {'file': 'C:\\temp\\Job-4.odb', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(COMPLETED, {'message': 'Analysis phase complete', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-4', 'clientHost': 'Adriel', 'handle': 26168})
mdb.jobs['Job-4']._Message(STEP, {'stepId': 1, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(ODB_FRAME, {'step': 0, 'frame': 0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(WARNING, {
    'message': 'The 3-direction at one or more points in one or more layers in 6912 elements as defined in *ORIENTATION are in the opposite direction to the element normals. Either the 1 or 2 and the 3-direction defined in *ORIENTATION will be reversed. The elements have been identified in element set WarnElem3DirOppElemNormalStep1Inc1.', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(WARNING, {
    'message': 'The local-3 direction (after additional rotation and permutation) of the material orientation , specified via *ORIENTATION, is in the plane of the SHELL, MEMBRANE, GASKET, COHESIVE, or SURFACE element. The local-1 direction will be projected onto the element surface and the positive element normal will be used as the local-3 direction. The elements have been identified in element set WarnElemUserNormMatOrient.', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(MEMORY_ESTIMATE, {'memory': 326.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(PHYSICAL_MEMORY, {'physical_memory': 32582.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(MINIMUM_MEMORY, {'minimum_memory': 48.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(ODB_FRAME, {'step': 0, 'frame': 1, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(STATUS, {'step': 1, 'increment': 1, 'attempts': 1, 
    'severe': 0, 'equilibrium': 1, 'iterations': 1, 'totalTime': 0.0, 
    'stepTime': 2.22e-16, 'timeIncrement': 2.22e-16, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(END_STEP, {'stepId': 1, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(COMPLETED, {'message': 'Analysis phase complete', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(JOB_COMPLETED, {'time': 'Thu Nov  7 12:30:07 2024', 
    'jobName': 'Job-4'})
del mdb.jobs['Job-3']
del mdb.jobs['Job-1']
del mdb.jobs['Job-4']
mdb.jobs.changeKey(fromName='Job-exp_rear', toName='Job-experiment')
mdb.jobs['Job-experiment'].submit(consistencyChecking=OFF)
mdb.jobs['Job-experiment']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'jobName': 'Job-experiment', 'clientHost': 'Adriel', 'handle': 0})
mdb.jobs['Job-experiment']._Message(ODB_FILE, {
    'file': 'C:\\temp\\Job-experiment.odb', 'phase': BATCHPRE_PHASE, 
    'jobName': 'Job-experiment'})
mdb.jobs['Job-experiment']._Message(COMPLETED, {
    'message': 'Analysis phase complete', 'phase': BATCHPRE_PHASE, 
    'jobName': 'Job-experiment'})
mdb.jobs['Job-experiment']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-experiment', 'clientHost': 'Adriel', 'handle': 10868})
mdb.jobs['Job-experiment']._Message(STEP, {'stepId': 1, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-experiment'})
mdb.jobs['Job-experiment']._Message(ODB_FRAME, {'step': 0, 'frame': 0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-experiment'})
mdb.jobs['Job-experiment']._Message(WARNING, {
    'message': 'The 3-direction at one or more points in one or more layers in 6912 elements as defined in *ORIENTATION are in the opposite direction to the element normals. Either the 1 or 2 and the 3-direction defined in *ORIENTATION will be reversed. The elements have been identified in element set WarnElem3DirOppElemNormalStep1Inc1.', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-experiment'})
mdb.jobs['Job-experiment']._Message(WARNING, {
    'message': 'The local-3 direction (after additional rotation and permutation) of the material orientation , specified via *ORIENTATION, is in the plane of the SHELL, MEMBRANE, GASKET, COHESIVE, or SURFACE element. The local-1 direction will be projected onto the element surface and the positive element normal will be used as the local-3 direction. The elements have been identified in element set WarnElemUserNormMatOrient.', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-experiment'})
mdb.jobs['Job-experiment']._Message(MEMORY_ESTIMATE, {'memory': 326.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-experiment'})
mdb.jobs['Job-experiment']._Message(PHYSICAL_MEMORY, {
    'physical_memory': 32582.0, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-experiment'})
mdb.jobs['Job-experiment']._Message(MINIMUM_MEMORY, {'minimum_memory': 48.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-experiment'})
mdb.jobs['Job-experiment']._Message(ODB_FRAME, {'step': 0, 'frame': 1, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-experiment'})
mdb.jobs['Job-experiment']._Message(STATUS, {'step': 1, 'increment': 1, 
    'attempts': 1, 'severe': 0, 'equilibrium': 1, 'iterations': 1, 
    'totalTime': 0.0, 'stepTime': 2.22e-16, 'timeIncrement': 2.22e-16, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-experiment'})
mdb.jobs['Job-experiment']._Message(END_STEP, {'stepId': 1, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-experiment'})
mdb.jobs['Job-experiment']._Message(COMPLETED, {
    'message': 'Analysis phase complete', 'phase': STANDARD_PHASE, 
    'jobName': 'Job-experiment'})
mdb.jobs['Job-experiment']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov  7 12:38:57 2024', 'jobName': 'Job-experiment'})
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(region=
    mdb.models['Model-1'].rootAssembly.sets['experimental_end'], typeName=
    PINNED)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-2', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'jobName': 'Job-2', 'clientHost': 'Adriel', 'handle': 0})
mdb.jobs['Job-2']._Message(ODB_FILE, {'file': 'C:\\temp\\Job-2.odb', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'message': 'Analysis phase complete', 
    'phase': BATCHPRE_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'clientHost': 'Adriel', 'handle': 27576})
mdb.jobs['Job-2']._Message(STEP, {'stepId': 1, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'step': 0, 'frame': 0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {
    'message': 'The 3-direction at one or more points in one or more layers in 6912 elements as defined in *ORIENTATION are in the opposite direction to the element normals. Either the 1 or 2 and the 3-direction defined in *ORIENTATION will be reversed. The elements have been identified in element set WarnElem3DirOppElemNormalStep1Inc1.', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {
    'message': 'The local-3 direction (after additional rotation and permutation) of the material orientation , specified via *ORIENTATION, is in the plane of the SHELL, MEMBRANE, GASKET, COHESIVE, or SURFACE element. The local-1 direction will be projected onto the element surface and the positive element normal will be used as the local-3 direction. The elements have been identified in element set WarnElemUserNormMatOrient.', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'memory': 326.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'physical_memory': 32582.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 48.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'step': 0, 'frame': 1, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'step': 1, 'increment': 1, 'attempts': 1, 
    'severe': 0, 'equilibrium': 1, 'iterations': 1, 'totalTime': 0.0, 
    'stepTime': 2.22e-16, 'timeIncrement': 2.22e-16, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(END_STEP, {'stepId': 1, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'message': 'Analysis phase complete', 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_COMPLETED, {'time': 'Thu Nov  7 17:05:56 2024', 
    'jobName': 'Job-2'})
# Save by adrie on 2024_11_07-17.38.44; build 2024 2023_09_21-13.55.25 RELr426 190762
